pragma solidity ^0.4.24;

contract Insurance{
    
        address owner;
        struct citizen{
            bool isdegenerated;
            string name;
            uint amountInsured;
        }
        
        mapping(address => citizen) public citizenmapping;
        mapping(address => bool) public doctormapping;
        
        constructor(){
            owner = msg.sender;
        }
        
        modifier onlyOwner(){
            require(owner==msg.sender);
            _;
        }
        
        function setDoctor(address _address) onlyOwner{
            require(!doctormapping[_address]);
            doctormapping[_address] = true;
        }
        
        function setCitizenData(string _name , uint _amountInsured) onlyOwner returns(address){
            address uniqueId = address(sha256(msg.sender,now));
            require(!citizenmapping[uniqueId].isdegenerated);
            citizenmapping[uniqueId].isdegenerated = true;
            citizenmapping[uniqueId].name = _name;
            citizenmapping[uniqueId].amountInsured = _amountInsured;
            return uniqueId;
        }
        
        function useInsurance(address _uniqueId ,uint _amountUsed) returns(string)
        {
            require(doctormapping[msg.sender]);
            if(citizenmapping[_uniqueId].amountInsured<_amountUsed){
                throw;
            }
            citizenmapping[_uniqueId].amountInsured-=_amountUsed;
            return "INSURANCE HAS BEEN USED SUCCESSFULLY";
            
        }
        
    
    
}